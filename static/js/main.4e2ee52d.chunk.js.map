{"version":3,"sources":["Myreact11.js","TodoList.js","pagination/Page.jsx","App.js","reportWebVitals.js","index.js"],"names":["Myreact11","TodoList","Page","React","useEffect","axios","get","then","response","console","log","data","SetPosts","useState","posts","postPerPage","currentPage","SetCurrentPage","start","end","pageItem","SetPageItem","numOfPages","Math","ceil","length","numOfButtons","i","push","arrOfCurrButtons","setArrOfCurrButtons","tempNumberOfButtons","dotsInitial","dotsLeft","dotsRight","sliced","slice","sliced1","sliced2","value","className","type","name","id","placeholder","map","index","email","style","fontSize","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e2ee52d.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\nimport { Table } from 'react-bootstrap';\n\nfunction Myreact11() {\n    const [user, setuser] = useState([]);\n    useEffect(() => {\n        fetch(\"https://reqres.in/api/users?page=2\").then((data) => {\n            data.json().then(result => {\n                console.log(\"result\", result);\n                setuser(result.data);\n            })\n        })\n    }, []);\n    return ( <Fragment>\n        <Table striped bordered hover variant = \"dark\" >\n        <thead >\n        <tr >\n        <th > Id </th> \n        <th > Email </th>\n        <th > FirstName </th> \n        <th > LastName </th>\n        <th > Avatar </th>\n        </tr > \n        </thead>  \n        <tbody > {\n            user.map((item, index) => < tr key = { index } >\n\n                <td > { item.id } </td>  \n                <td > { item.email } </td>  \n                <td > { item.first_name } </td>  \n                <td > { item.last_name } </td>  \n                <td > { item.avatar } </td>  \n                </tr >\n            )\n        } \n        </tbody>  \n       </ Table > \n        </Fragment>\n    )\n}\nexport default Myreact11;","import React,  {useState} from \"react\";\nfunction TodoList() {\n    const [inputList, setInputList]= useState(\"\");\n    const [items, setitems]= useState([]);\n    const itemEvent  = (event)=>{\n        setInputList(event.target.value);\n    };\n\n    const listofitems = ()=>{\n        setitems((olditems)=>{\n            return [... olditems, inputList];\n            \n        });\n         setInputList(\"\");\n    };\n    return(\n        <>\n            <div className=\"maindiv\">\n                <div className=\"centerdiv\">\n                    <br/>\n                    <h1>TODO LIST</h1>\n                    <br/>\n                    <input type=\"text\" placeholder=\"Add a Items\" \n                     value={inputList}\n                     onChange={itemEvent}/>\n                    <button onClick={listofitems}>+</button>\n                        {items.map((itemval)=>{\n                          return <p>{itemval}</p>  \n                        })}\n                </div>\n                 \n            </div>\n        </>\n    );\n}\nexport default TodoList;","import React, { useState, useEffect } from \"react\";\nimport '../pagination/pagination.css'\nimport axios from 'axios'\nimport {RiDeleteBinLine} from 'react-icons/ri'\nimport {MdOutlineEditNote} from 'react-icons/md'\nconst Page = () => {\n    React.useEffect(() => {\n        axios.get('https://jsonplaceholder.typicode.com/comments ')\n        .then(response => {\n        console.log(response.data);\n        SetPosts(response.data)\n        });\n        \n     }, [])\n    \n    const [posts, SetPosts] = useState([]);\n    const [postPerPage, SetPostPerPage] = useState(10);\n    const [currentPage, SetCurrentPage] = useState(1);\n\n    const [pageItem, SetPageItem] = useState({\n        start: 0,\n        end: postPerPage\n    })\n\n    const onPageChangeEvent = (start, end) => {\n        SetPageItem({\n            start: start,\n            end: end\n        })\n    }\n\n    const OnPerPostChangeEvent = (e) => {\n        SetPostPerPage(e.target.value);\n        SetCurrentPage(1);\n    }\n\n   \n\n    const numOfPages = Math.ceil(posts.length / postPerPage);\n    // console.log(numOfPages);\n\n    const numOfButtons = [];\n    for (let i = 1; i <= numOfPages; i++) {\n        numOfButtons.push(i);\n    }\n\n    const prevPageClick = () => {\n        if (currentPage === 1) {\n            SetCurrentPage(currentPage);\n        } else {\n            SetCurrentPage(currentPage - 1);\n        }\n    }\n\n\n    const nextPageClick = () => {\n        if (currentPage === numOfButtons.length) {\n            SetCurrentPage(currentPage);\n        } else {\n            SetCurrentPage(currentPage + 1);\n        }\n    }\n\n    const [arrOfCurrButtons, setArrOfCurrButtons] = useState([]);   \n\n    useEffect(() => {\n        let tempNumberOfButtons = [...arrOfCurrButtons]\n\n        let dotsInitial = '...'\n        let dotsLeft = '... '\n        let dotsRight = ' ...'\n\n        if (numOfButtons.length < 6) {\n            tempNumberOfButtons = numOfButtons\n        }\n\n        else if (currentPage >= 1 && currentPage <= 3) {\n            tempNumberOfButtons = [1, 2, 3, 4, dotsInitial, numOfButtons.length]\n        }\n\n        else if (currentPage === 4) {\n            const sliced = numOfButtons.slice(0, 5)\n            tempNumberOfButtons = [...sliced, dotsInitial, numOfButtons.length]\n        }\n\n        else if (currentPage > 4 && currentPage < numOfButtons.length - 2) {\n            // from 5 to 8 -> (10 - 2)\n            const sliced1 = numOfButtons.slice(currentPage - 2, currentPage)\n            // sliced1 (5-2, 5) -> [4,5] \n            const sliced2 = numOfButtons.slice(currentPage, currentPage + 1)\n            // sliced1 (5, 5+1) -> [6]\n            tempNumberOfButtons = ([1, dotsLeft, ...sliced1, ...sliced2, dotsRight, numOfButtons.length])\n            // [1, '...', 4, 5, 6, '...', 10]\n        }\n\n        else if (currentPage > numOfButtons.length - 3) {\n            // > 7\n            const sliced = numOfButtons.slice(numOfButtons.length - 4)\n            // slice(10-4) \n            tempNumberOfButtons = ([1, dotsLeft, ...sliced])\n        }\n\n        else if (currentPage === dotsInitial) {\n            // [1, 2, 3, 4, \"...\", 10].length = 6 - 3  = 3 \n            // arrOfCurrButtons[3] = 4 + 1 = 5\n            // or \n            // [1, 2, 3, 4, 5, \"...\", 10].length = 7 - 3 = 4\n            // [1, 2, 3, 4, 5, \"...\", 10][4] = 5 + 1 = 6\n            SetCurrentPage(arrOfCurrButtons[arrOfCurrButtons.length - 3] + 1)\n        }\n        else if (currentPage === dotsRight) {\n            SetCurrentPage(arrOfCurrButtons[3] + 2)\n        }\n\n        else if (currentPage === dotsLeft) {\n            SetCurrentPage(arrOfCurrButtons[3] - 2)\n        }\n\n        setArrOfCurrButtons(tempNumberOfButtons);\n        const value = currentPage * postPerPage;\n\n        onPageChangeEvent(value - postPerPage, value)\n    }, [currentPage, postPerPage, numOfPages]);\n\n    return (\n        <>\n            <div className=\"container-fluid mt-5 mb-5 \">\n            <input type=\"search\" name=\"\" id=\"search-field\" placeholder=\"Search\" />\n\n                <div className=\"row justify-content-center\">\n                    <div className=\"col-md-10\">\n                        <div className=\"card\">\n                        <div className=\"card-body p-0\">\n                            \n\n                            <div className=\"table-responsive\">\n                                <table className=\"table table-text-small mb-0\">\n                                    <thead className=\"thead-primary table-sorting\">\n                                        <tr>\n                                            <th>Id</th>\n                                            <th>Name</th>\n                                            <th>Email</th>\n                                            <th>Role</th>\n                                            <th>Action</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            posts.slice(pageItem.start, pageItem.end).map((data, index) => {\n                                                return (\n                                                    <tr key={data.id}>\n                                                        <td>{data.id}</td>\n                                                        <td>{data.name}</td> \n                                                        <td>{data.email}</td>\n                                                        <td>{data.name}</td>\n                                                        <td><MdOutlineEditNote style={{fontSize:\"20px\"}}/>&nbsp;<RiDeleteBinLine style={{fontSize:\"18px\"}}/></td>\n                                                    </tr>\n                                                )\n                                            })\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                          <div className=\"table-filter-info\">\n                                \n                                <div className=\"dt-pagination\">\n                                    <ul className=\"dt-pagination-ul\">\n                                        <li className={`dt-item ${currentPage === 1 ? 'disabled': ''}`}><a className=\"dt-link\" onClick={prevPageClick}>Prev</a></li>\n                                        {\n                                            arrOfCurrButtons.map((data, index) => {\n                                                return (\n                                                    <li key={index} className={`dt-item ${currentPage === data ? 'active' : ''}`}><a className=\"dt-link\" onClick={() => SetCurrentPage(data)}>{data}</a></li>\n                                                )\n                                            })\n                                        }\n                                        <li className={`dt-item ${currentPage === numOfButtons.length ? 'disabled': ''}`}><a className=\"dt-link\" onClick={nextPageClick}>Next</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Page;","import React, { createContext, useState } from 'react';\nimport './App.css';\nimport Dummy from './Dummy';\nimport Myreact11 from './Myreact11';\nimport Task from './Task';\nimport TodoList from './TodoList';\nimport '../node_modules/jquery'\nimport CompA from './Context-API/CompA';\nimport Pagination from './pagination/Pagination';\nimport Page from './pagination/Page';\nconst context = createContext();\n\nfunction App() {\n  // const Data = [\n  //   {\n  //     name: \"javed\",\n  //     Profile: \"Software Developer\",\n  //     ctc: \"10 Lakh\",\n  //     hobby: \"programming\"\n  //   },\n  //   {\n  //     name: \"sahil\",\n  //     Profile: \"Software Developer\",\n  //     ctc: \"10 Lakh\",\n  //     hobby: \"programming\"\n  //   },\n  //   {\n  //     name: \"sagar\",\n  //     Profile: \"Software Developer\",\n  //     ctc: \"10 Lakh\",\n  //     hobby: \"programming\"\n  //   }\n\n\n  // ]\n  // const [myState, setMyState] = useState(Data);\n\n  return (\n    <>\n      {/* {/* <Task/> */}\n       {/* <Dummy/> */}\n      {/* <TodoList /> */}\n      {/* <context.Provider value={myState}> */}\n        {/* <CompA /> */}\n      {/* </context.Provider> */}\n  {/* <Pagination/> */}\n  <Page/>\n    </>\n  );\n}\nexport default App;\nexport { context };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}